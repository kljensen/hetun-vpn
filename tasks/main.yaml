- name: Ensure sysctl params are set
  sysctl:
    name: net.inet.{{item}}
    value: 1
    reload: no
    sysctl_set: yes 
  with_items:
    - ip.forwarding
    - esp.enable
    - ah.enable
    - ipcomp.enable
  tags: sysctl

- name: Ensure the enc0 interface is configured
  copy:
    dest: /etc/hostname.enc0
    owner: root
    group: wheel
    mode: 0640
    content: |
      inet {{ hetun_enc_ip }} {{ hetun_enc_netmask }} {{ hetun_enc_broadcast }}
      up
  changed_when: true  
  register: enc_configuration
  # notify: Reload network configuration

- name: Bring up enc0
  command: sh /etc/netstart enc0
  when: enc_configuration.changed

- name: Write adblock configuration
  template:
    src: ads.conf
    dest: /var/unbound/etc/ads.conf
    mode: 0600
  tags:
    - adblock
    - unbound
  when: hetun_unbound and hetun_block_ads
  register: ad_configuration

- name: Write unbound.conf
  template:
    src: unbound.conf.j2
    dest: /var/unbound/etc/unbound.conf
    mode: 0600
  tags: unbound
  when: hetun_unbound and hetun_block_ads
  register: unbound_configuration

- name: Write resolv.conf
  template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
    mode: 0644
  tags:
    - resolv
    - unbound
  when: hetun_unbound or resolv_upstream_dns
  register: resolv_configuration


- name: Enable unbound service
  service:
    name: unbound
    state: started
    enabled: true
  when: hetun_unbound
  tags: unbound

- name: Restart unbound
  service:
    name: unbound
    state: reloaded
    enabled: true
  when: unbound_configuration.changed or ad_configuration.changed
  tags: unbound

- name: Create vpn certificate authority
  command: ikectl -q ca vpn create password {{hetun_ca_passphrase}}
  args: 
      creates: /etc/ssl/vpn
      stdin: |
        .
        .
        .
        .
        .
        .
        vpn
        .
  register: create_ca
  tags: vpn-keys

- name: Install vpn certificate authority
  command: ikectl ca vpn install
  when: create_ca.changed

- name: Create hetun_hostname/server certificate
  command: "ikectl ca vpn certificate {{hetun_hostname}} create server"
  args: 
      creates: /etc/ssl/vpn/{{hetun_hostname}}.crt
      stdin: |
        .
        .
        .
        .
        .
        "{{hetun_hostname}}"
        .
  register: create_server_cert
  tags: vpn-keys

- name: Install server certificate 
  command: ikectl ca vpn certificate {{hetun_hostname}} install
  when: create_server_cert.changed

- debug: var=hetun_vpn_users
  tags: vpn-users

- name: Create vpn user certificates
  command: "ikectl ca vpn certificate {{ item.username }} create client"
  args: 
      creates: "/etc/ssl/vpn/{{ item.username}}.crt"
      stdin: |
        .
        .
        .
        .
        .
        "{{item.username}}"
        "{{item.email}}"
  with_items: "{{hetun_vpn_users}}"
  register: vpn_user_certs
  tags: vpn-users

- debug: var=vpn_user_certs
  tags: vpn-users

- name: Ensures /var/client-certificates dir exists
  file: path=/var/client-certificates state=directory

- name: Export vpn user certificates
  command: "ikectl ca vpn certificate {{ item.item.username }} export password {{ item.item.passphrase }}"
  with_items: "{{ vpn_user_certs.results }}"
  args:
    chdir: /var/client-certificates
    creates: "/var/client-certificates/{{item.item.username}}.tgz"
  when:
    - item.changed
  tags: vpn-users

- name: Untar vpn exported user certificates
  command: "tar -xzf /var/client-certificates/{{item.username}}.tgz"
  args:
    chdir: /var/client-certificates
    creates: "/var/client-certificates/export/{{ item.username }}.pfx"
  with_items: "{{hetun_vpn_users}}"
  tags: vpn-users-export

# - name: Register p12 PayloadContent
#   shell: "cat /var/client-certificates/export/{{ item.username }}.pfx | uuencode -m {{ item.username }}.pfx"
#   register:  PayloadContent
#   with_items: "{{hetun_vpn_users}}"
#   tags: vpn-users-export

- name: Read user p12 (pfx) files
  slurp:
      src: "/var/client-certificates/export/{{ item.username }}.pfx"
  register:  pfx
  with_items: "{{hetun_vpn_users}}"
  tags: vpn-users-export

- debug: var=pfx
  tags: vpn-users-export


# - name: Combine the vpn and vpn ca certs
#   slurp:
#     src: /etc/ssl/vpn/ca.crt
#   register: cacrt
#   tags: vpn-users-export\

- name: Slurp the ca cert
  slurp:
    src: /etc/ssl/vpn/ca.crt
  register: cacrt
  tags: vpn-users-export

- name: Set facts for mobileconfigs
  set_fact:
    PayloadContentCA: "{{ cacrt['content'] }}"
  tags: vpn-users-export

# See
# https://wiki.strongswan.org/projects/strongswan/wiki/AppleIKEv2Profile
# for good documentation
- name: Build the mobileconfigs
  template:
    src: mobileconfig.j2
    dest: /var/client-certificates/export//{{ item.0.username }}.mobileconfig
    mode: 0600
  with_together:
    - "{{ hetun_vpn_users }}"
    - "{{ pfx.results }}"
  tags: vpn-users-export

- name: Ensure /etc/badguys exists
  copy:
    dest: /etc/badguys
    owner: root
    group: wheel
    mode: 0640
    force: false
    content: ""

- name: Ensure pf is configured
  template:
    src: pf.conf.j2
    dest: /etc/pf.conf
    owner: root
    group: wheel
    mode: 0644
  notify: Reload pf configuration
  tags: pf

- name: Ensure iked is configured
  template:
    src: iked.conf.j2
    dest: /etc/iked.conf
    owner: root
    group: wheel
    mode: 0600
  notify: Reload iked service
  tags: iked


  # ikesa auth hmac-sha2-256 enc aes-256 prf hmac-sha2-256 group ecp256
#       ikesa auth hmac-sha2-256 enc aes-256 prf hmac-sha2-256 group ecp256 \
      # aes256gcm16-ecp384,aes256-sha2_512-prfsha512-ecp384



# - name:  Ensure iked service is running/enabled
#   service:
#     name: iked
#     state: started
#     enabled: true
#   tags: iked
